# -*- coding: utf-8 -*-
"""minimal_weighted_word_matching_baseline_v3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_f8FqLRT2mbVeEy7meRYEXK2hFtIJR5M
"""

# -*- coding: utf-8 -*-
##########################################
# Minimal weighted key-word/phrase search
##########################################

import re

def rank_documents_on_weighted_matches(documents, keyword_weights):
    """
    Ranks documents based on the presence of weighted keywords-phrases.
    comparison looks at text without:
    - captialization
    - spaces
    - newlines
    - special symbols

    Parameters:
    documents (list of str): The list of documents to be ranked.
    keyword_weights (list of tuple): A list of tuples, where the first element is the keyword and the
    second element is the corresponding weight.

    Returns:
    list of (str, float): A list of tuples, where the first element is the document and the
    second element is the ranking score.
    """

    ranked_documents = []

    for document in documents:
        score = 0
        # Make the document lowercase and strip all symbols, spaces, and newline characters
        match_document = re.sub(r'[^\w\s]', '', document.lower()).replace('\n', '').replace(' ','')
        # print(match_document)
        for keyword, weight in keyword_weights:

            # # inspection
            # print(keyword, weight)

            # Make the keyword lowercase and strip all symbols, spaces, and newline characters
            match_keyword = re.sub(r'[^\w\s]', '', keyword.lower()).replace('\n', '').replace(' ','')

            # # inspection
            # print(match_keyword)

            # Check if the keyword-phrase is in the document
            if match_keyword in match_document:
                # If the keyword-phrase is in the document, add its weight to the score
                score += weight

        ranked_documents.append((document, score))

    # Sort the documents by their ranking scores in descending order
    ranked_documents.sort(key=lambda x: x[1], reverse=True)

    return ranked_documents

################
# Example usage
################
documents = [
    "This is the first document about machine learning.",
    "The second document discusses data analysis and visualization.",
    "The third document focuses on natural language processing.",
    "The fourth document talks about deep learning and neural networks.",
    """to test line breaks
    Emotion mining
     data
    analysis
    Keywords: emotion mining, sentiment analysis, natural disasters, psychology, technological disasters""",
]

# list of tuples: ( phrase as str, weight as int )
keyword_weights = [("machine learning", 3), ("data analysis", 2), ("natural language processing", 4), ("deep learning", 5), ("neural networks", 6)]

######
# Run
######
ranked_documents = rank_documents_on_weighted_matches(documents, keyword_weights)

# print scores
for document, score in ranked_documents:
    print(f"Document: {document}\nScore: {score}\n")